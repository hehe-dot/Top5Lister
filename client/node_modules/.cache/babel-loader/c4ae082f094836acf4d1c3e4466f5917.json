{"ast":null,"code":"var _jsxFileName = \"/Users/jiayi/Desktop/CSE 316/Top5Lists_HW5/client/src/auth/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useEffect, useState } from \"react\";\nimport { useHistory } from 'react-router-dom';\nimport api from '../api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nconsole.log(\"create AuthContext: \" + AuthContext); // THESE ARE ALL THE TYPES OF UPDATES TO OUR AUTH STATE THAT CAN BE PROCESSED\n\nexport const AuthActionType = {\n  GET_LOGGED_IN: \"GET_LOGGED_IN\",\n  REGISTER_USER: \"REGISTER_USER\",\n  LOGIN: \"LOGIN\",\n  LOGOUT: \"LOGOUT\"\n};\n\nfunction AuthContextProvider(props) {\n  _s();\n\n  const [auth, setAuth] = useState({\n    user: null,\n    loggedIn: false\n  });\n  const history = useHistory();\n  useEffect(() => {\n    auth.getLoggedIn();\n  }, []);\n\n  const authReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n\n    switch (type) {\n      case AuthActionType.GET_LOGGED_IN:\n        {\n          return setAuth({\n            user: payload.user,\n            loggedIn: payload.loggedIn\n          });\n        }\n\n      case AuthActionType.REGISTER_USER:\n        {\n          return setAuth({\n            user: payload.user,\n            loggedIn: true\n          });\n        }\n\n      case AuthActionType.LOGIN:\n        {\n          return setAuth({\n            user: payload.user,\n            loggedIn: true\n          });\n        }\n\n      case AuthActionType.LOGOUT:\n        {\n          return setAuth({\n            user: null,\n            loggedIn: false\n          });\n        }\n\n      default:\n        return auth;\n    }\n  };\n\n  auth.getLoggedIn = async function () {\n    try {\n      const response = await api.getLoggedIn();\n\n      if (response.status === 200) {\n        authReducer({\n          type: AuthActionType.GET_LOGGED_IN,\n          payload: {\n            loggedIn: response.data.loggedIn,\n            user: response.data.user\n          }\n        });\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  auth.registerUser = async function (userData, store) {\n    try {\n      const response = await api.registerUser(userData);\n\n      if (response.status === 200) {\n        authReducer({\n          type: AuthActionType.REGISTER_USER,\n          payload: {\n            user: response.data.user\n          }\n        });\n        history.push(\"/\");\n        store.loadIdNamePairs();\n      }\n    } catch (e) {\n      return Promise.reject(new Error(e.response.data.errorMessage));\n    }\n  };\n\n  auth.login = async function (userData) {\n    try {\n      const response = await api.loginUser(userData);\n\n      if (response.status === 200) {\n        console.log('auth success');\n        authReducer({\n          type: AuthActionType.LOGIN,\n          payload: {\n            user: response.data.user\n          }\n        });\n        history.push(\"/\");\n      }\n    } catch (e) {\n      return Promise.reject(new Error(e.response.data.errorMessage));\n    }\n  };\n\n  auth.logoutUser = async function () {\n    const response = await api.logoutUser();\n\n    if (response.status === 200) {\n      console.log('auth success');\n      authReducer({\n        type: AuthActionType.LOGOUT,\n        payload: {\n          user: null\n        }\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      auth\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 9\n  }, this);\n}\n\n_s(AuthContextProvider, \"GpD44ljWoaxV/5r2+4QPOJ690a4=\", false, function () {\n  return [useHistory];\n});\n\n_c = AuthContextProvider;\nexport default AuthContext;\nexport { AuthContextProvider };\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"sources":["/Users/jiayi/Desktop/CSE 316/Top5Lists_HW5/client/src/auth/index.js"],"names":["React","createContext","useEffect","useState","useHistory","api","AuthContext","console","log","AuthActionType","GET_LOGGED_IN","REGISTER_USER","LOGIN","LOGOUT","AuthContextProvider","props","auth","setAuth","user","loggedIn","history","getLoggedIn","authReducer","action","type","payload","response","status","data","err","registerUser","userData","store","push","loadIdNamePairs","e","Promise","reject","Error","errorMessage","login","loginUser","logoutUser","children"],"mappings":"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","sourcesContent":["import React, { createContext, useEffect, useState } from \"react\";\nimport { useHistory } from 'react-router-dom'\nimport api from '../api'\n\nconst AuthContext = createContext();\nconsole.log(\"create AuthContext: \" + AuthContext);\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR AUTH STATE THAT CAN BE PROCESSED\nexport const AuthActionType = {\n    GET_LOGGED_IN: \"GET_LOGGED_IN\",\n    REGISTER_USER: \"REGISTER_USER\",\n    LOGIN: \"LOGIN\",\n    LOGOUT: \"LOGOUT\"\n}\n\nfunction AuthContextProvider(props) {\n    const [auth, setAuth] = useState({\n        user: null,\n        loggedIn: false\n    });\n    const history = useHistory();\n\n    useEffect(() => {\n        auth.getLoggedIn();\n    }, []);\n\n    const authReducer = (action) => {\n        const { type, payload } = action;\n        switch (type) {\n            case AuthActionType.GET_LOGGED_IN: {\n                return setAuth({\n                    user: payload.user,\n                    loggedIn: payload.loggedIn\n                });\n            }\n            case AuthActionType.REGISTER_USER: {\n                return setAuth({\n                    user: payload.user,\n                    loggedIn: true\n                })\n            }\n            case AuthActionType.LOGIN: {\n                return setAuth({\n                    user: payload.user,\n                    loggedIn: true\n                })\n            }\n            case AuthActionType.LOGOUT: {\n                return setAuth({\n                    user: null,\n                    loggedIn: false\n                })\n            }\n            default:\n                return auth;\n        }\n    }\n\n    auth.getLoggedIn = async function () {\n        try{\n            const response = await api.getLoggedIn();\n            if (response.status === 200) {\n                authReducer({\n                    type: AuthActionType.GET_LOGGED_IN,\n                    payload: {\n                        loggedIn: response.data.loggedIn,\n                        user: response.data.user\n                    }\n                });\n            }\n        }catch(err){\n            console.log(err);\n        }\n    }\n\n    auth.registerUser = async function(userData, store) {\n        try{\n            const response = await api.registerUser(userData);      \n            if (response.status === 200) {\n                authReducer({\n                    type: AuthActionType.REGISTER_USER,\n                    payload: {\n                        user: response.data.user\n                    }\n                })\n                history.push(\"/\");\n                store.loadIdNamePairs();\n            }\n        }catch (e){\n            return Promise.reject(new Error (e.response.data.errorMessage))\n        }\n    }\n\n    auth.login = async function(userData){\n        try{\n            const response = await api.loginUser(userData);\n            if (response.status === 200){\n                console.log('auth success');\n                authReducer({\n                    type: AuthActionType.LOGIN,\n                    payload: {\n                        user: response.data.user\n                    }\n                })\n                history.push(\"/\");\n            }\n        }catch (e){\n            return Promise.reject(new Error (e.response.data.errorMessage))\n        }\n    }\n\n    auth.logoutUser = async function(){\n        const response = await api.logoutUser();\n        if (response.status === 200){\n            console.log('auth success');\n            authReducer({\n                type: AuthActionType.LOGOUT,\n                payload: {\n                    user: null\n                }\n            })\n        }\n    }\n\n    return (\n        <AuthContext.Provider value={{\n            auth\n        }}>\n            {props.children}\n        </AuthContext.Provider>\n    );\n}\n\nexport default AuthContext;\nexport { AuthContextProvider };"]},"metadata":{},"sourceType":"module"}