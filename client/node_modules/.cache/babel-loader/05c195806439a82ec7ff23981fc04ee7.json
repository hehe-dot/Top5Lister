{"ast":null,"code":"var _jsxFileName = \"/Users/jiayi/Desktop/CSE 316/Top5Lists_HW5/client/src/store/index.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useContext, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport jsTPS from '../common/jsTPS';\nimport api from '../api';\nimport MoveItem_Transaction from '../transactions/MoveItem_Transaction';\nimport UpdateItem_Transaction from '../transactions/UpdateItem_Transaction';\nimport AuthContext from '../auth';\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n// THIS IS THE CONTEXT WE'LL USE TO SHARE OUR STORE\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const GlobalStoreContext = /*#__PURE__*/createContext({}); // THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\n\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n  UNMARK_LIST_FOR_DELETION: \"UNMARK_LIST_FOR_DELETION\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  SET_ITEM_EDIT_ACTIVE: \"SET_ITEM_EDIT_ACTIVE\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n  ENABLE_UNDO: \"ENABLE_UNDO\",\n  ENABLE_REDO: \"ENABLE_REDO\"\n}; // WE'LL NEED THIS TO PROCESS TRANSACTIONS\n\nconst tps = new jsTPS(); // WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\n\nfunction GlobalStoreContextProvider(props) {\n  _s();\n\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    currentList: null,\n    newListCounter: 0,\n    listNameActive: false,\n    itemActive: false,\n    listMarkedForDeletion: null\n  });\n  const history = useHistory(); // SINCE WE'VE WRAPPED THE STORE IN THE AUTH CONTEXT WE CAN ACCESS THE USER HERE\n\n  const {\n    auth\n  } = useContext(AuthContext); // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n\n    switch (type) {\n      // LIST UPDATE OF ITS NAME\n      case GlobalStoreActionType.CHANGE_LIST_NAME:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: payload.top5List,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null,\n            undoActive: false,\n            redoActive: false\n          });\n        }\n      // STOP EDITING THE CURRENT LIST\n\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null,\n            undoActive: false,\n            redoActive: false\n          });\n        }\n      // CREATE A NEW LIST\n\n      case GlobalStoreActionType.CREATE_NEW_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter + 1,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null,\n            undoActive: false,\n            redoActive: false\n          });\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null,\n            undoActive: false,\n            redoActive: false\n          });\n        }\n      // PREPARE TO DELETE A LIST\n\n      case GlobalStoreActionType.MARK_LIST_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: payload,\n            undoActive: false,\n            redoActive: false\n          });\n        }\n      // PREPARE TO DELETE A LIST\n\n      case GlobalStoreActionType.UNMARK_LIST_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null,\n            undoActive: false,\n            redoActive: false\n          });\n        }\n      // UPDATE A LIST\n\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null,\n            undoActive: store.undoActive,\n            redoActive: store.redoActive\n          });\n        }\n      // START EDITING A LIST ITEM\n\n      case GlobalStoreActionType.SET_ITEM_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: true,\n            listMarkedForDeletion: null,\n            undoActive: store.undoActive,\n            redoActive: store.redoActive\n          });\n        }\n      // START EDITING A LIST NAME\n\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: true,\n            isItemEditActive: false,\n            listMarkedForDeletion: null,\n            undoActive: store.undoActive,\n            redoActive: store.redoActive\n          });\n        }\n\n      case GlobalStoreActionType.ENABLE_UNDO:\n        {\n          console.log(\"undo\");\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            undoActive: tps.hasTransactionToUndo(),\n            redoActive: tps.hasTransactionToRedo(),\n            listMarkedForDeletion: null\n          });\n        }\n\n      case GlobalStoreActionType.ENABLE_REDO:\n        {\n          console.log(\"redo\");\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            undoActive: tps.hasTransactionToUndo(),\n            redoActive: tps.hasTransactionToRedo(),\n            listMarkedForDeletion: null\n          });\n        }\n\n      default:\n        return store;\n    }\n  }; // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n  // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n\n\n  store.changeListName = async function (id, newName) {\n    let response = await api.getTop5ListById(id);\n\n    if (response.data.success) {\n      let top5List = response.data.top5List;\n\n      if (top5List.ownerEmail === auth.user.email) {\n        top5List.name = newName;\n\n        async function updateList(top5List) {\n          response = await api.updateTop5ListById(top5List._id, top5List);\n\n          if (response.data.success) {\n            async function getListPairs(top5List) {\n              response = await api.getTop5ListPairs();\n\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs.filter(list => list.ownerEmail === auth.user.email);\n                storeReducer({\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                  payload: {\n                    idNamePairs: pairsArray,\n                    top5List: top5List\n                  }\n                });\n              }\n            }\n\n            getListPairs(top5List);\n          }\n        }\n\n        updateList(top5List);\n      }\n    }\n  }; // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n\n\n  store.closeCurrentList = function () {\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n    tps.clearAllTransactions();\n    history.push(\"/\");\n  }; // THIS FUNCTION CREATES A NEW LIST\n\n\n  store.createNewList = async function () {\n    let newListName = \"Untitled\" + store.newListCounter;\n    let payload = {\n      name: newListName,\n      items: [\"?\", \"?\", \"?\", \"?\", \"?\"],\n      ownerEmail: auth.user.email\n    };\n    const response = await api.createTop5List(payload);\n\n    if (response.data.success) {\n      tps.clearAllTransactions();\n      let newList = response.data.top5List;\n      storeReducer({\n        type: GlobalStoreActionType.CREATE_NEW_LIST,\n        payload: newList\n      }); // IF IT'S A VALID LIST THEN LET'S START EDITING IT\n\n      history.push(\"/top5list/\" + newList._id);\n    } else {\n      console.log(\"API FAILED TO CREATE A NEW LIST\");\n    }\n  }; // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n\n\n  store.loadIdNamePairs = async function () {\n    const response = await api.getTop5ListPairs();\n\n    if (response.data.success) {\n      let pairsArray = response.data.idNamePairs.filter(list => list.ownerEmail === auth.user.email);\n      storeReducer({\n        type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n        payload: pairsArray\n      });\n    } else {\n      console.log(\"API FAILED TO GET THE LIST PAIRS\");\n    }\n  }; // THE FOLLOWING 5 FUNCTIONS ARE FOR COORDINATING THE DELETION\n  // OF A LIST, WHICH INCLUDES USING A VERIFICATION MODAL. THE\n  // FUNCTIONS ARE markListForDeletion, deleteList, deleteMarkedList,\n  // showDeleteListModal, and hideDeleteListModal\n\n\n  store.markListForDeletion = async function (id) {\n    // GET THE LIST\n    let response = await api.getTop5ListById(id);\n\n    if (response.data.success) {\n      let top5List = response.data.top5List;\n\n      if (top5List.ownerEmail === auth.user.email) {\n        storeReducer({\n          type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n          payload: top5List\n        });\n      }\n    }\n  };\n\n  store.deleteList = async function (listToDelete) {\n    let response = await api.deleteTop5ListById(listToDelete._id);\n\n    if (response.data.success) {\n      store.loadIdNamePairs();\n      history.push(\"/\");\n    }\n  };\n\n  store.deleteMarkedList = function () {\n    store.deleteList(store.listMarkedForDeletion);\n  };\n\n  store.unmarkListForDeletion = function () {\n    storeReducer({\n      type: GlobalStoreActionType.UNMARK_LIST_FOR_DELETION,\n      payload: null\n    });\n  }; // THE FOLLOWING 8 FUNCTIONS ARE FOR COORDINATING THE UPDATING\n  // OF A LIST, WHICH INCLUDES DEALING WITH THE TRANSACTION STACK. THE\n  // FUNCTIONS ARE setCurrentList, addMoveItemTransaction, addUpdateItemTransaction,\n  // moveItem, updateItem, updateCurrentList, undo, and redo\n\n\n  store.setCurrentList = async function (id) {\n    let response = await api.getTop5ListById(id);\n\n    if (response.data.success) {\n      let top5List = response.data.top5List;\n      response = await api.updateTop5ListById(top5List._id, top5List);\n\n      if (response.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\n          payload: top5List\n        });\n        history.push(\"/top5list/\" + top5List._id);\n      }\n    }\n  };\n\n  store.addMoveItemTransaction = function (start, end) {\n    let transaction = new MoveItem_Transaction(store, start, end);\n    tps.addTransaction(transaction);\n  };\n\n  store.addUpdateItemTransaction = function (index, newText) {\n    let oldText = store.currentList.items[index];\n    let transaction = new UpdateItem_Transaction(store, index, oldText, newText);\n    tps.addTransaction(transaction);\n  };\n\n  store.moveItem = function (start, end) {\n    start -= 1;\n    end -= 1;\n\n    if (start < end) {\n      let temp = store.currentList.items[start];\n\n      for (let i = start; i < end; i++) {\n        store.currentList.items[i] = store.currentList.items[i + 1];\n      }\n\n      store.currentList.items[end] = temp;\n    } else if (start > end) {\n      let temp = store.currentList.items[start];\n\n      for (let i = start; i > end; i--) {\n        store.currentList.items[i] = store.currentList.items[i - 1];\n      }\n\n      store.currentList.items[end] = temp;\n    } // NOW MAKE IT OFFICIAL\n\n\n    store.updateCurrentList();\n  };\n\n  store.updateItem = function (index, newItem) {\n    store.currentList.items[index] = newItem;\n    store.updateCurrentList();\n  };\n\n  store.updateCurrentList = async function () {\n    const response = await api.updateTop5ListById(store.currentList._id, store.currentList);\n\n    if (response.data.success) {\n      storeReducer({\n        type: GlobalStoreActionType.SET_CURRENT_LIST,\n        payload: store.currentList\n      });\n      store.updateToolbar();\n    }\n  };\n\n  store.undo = function () {\n    tps.undoTransaction();\n    store.updateToolbar();\n  };\n\n  store.redo = function () {\n    tps.doTransaction();\n    store.updateToolbar();\n  };\n\n  store.canUndo = function () {\n    return tps.hasTransactionToUndo();\n  };\n\n  store.canRedo = function () {\n    return tps.hasTransactionToRedo();\n  };\n\n  store.updateToolbar = function () {\n    if (tps.hasTransactionToUndo()) {\n      storeReducer({\n        type: GlobalStoreActionType.ENABLE_UNDO,\n        payload: null\n      });\n    }\n\n    if (tps.hasTransactionToRedo()) {\n      storeReducer({\n        type: GlobalStoreActionType.ENABLE_REDO,\n        payload: null\n      });\n    }\n  }; // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n\n\n  store.setIsListNameEditActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: null\n    });\n  }; // THIS FUNCTION ENABLES THE PROCESS OF EDITING AN ITEM\n\n\n  store.setIsItemEditActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_ITEM_EDIT_ACTIVE,\n      payload: null\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(GlobalStoreContext.Provider, {\n    value: {\n      store\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 450,\n    columnNumber: 9\n  }, this);\n}\n\n_s(GlobalStoreContextProvider, \"KXcxQER+1E+Fvo7SefurB2VfaDE=\", false, function () {\n  return [useHistory];\n});\n\n_c = GlobalStoreContextProvider;\nexport default GlobalStoreContext;\nexport { GlobalStoreContextProvider };\n\nvar _c;\n\n$RefreshReg$(_c, \"GlobalStoreContextProvider\");","map":{"version":3,"sources":["/Users/jiayi/Desktop/CSE 316/Top5Lists_HW5/client/src/store/index.js"],"names":["createContext","useContext","useState","useHistory","jsTPS","api","MoveItem_Transaction","UpdateItem_Transaction","AuthContext","GlobalStoreContext","GlobalStoreActionType","CHANGE_LIST_NAME","CLOSE_CURRENT_LIST","CREATE_NEW_LIST","LOAD_ID_NAME_PAIRS","MARK_LIST_FOR_DELETION","UNMARK_LIST_FOR_DELETION","SET_CURRENT_LIST","SET_ITEM_EDIT_ACTIVE","SET_LIST_NAME_EDIT_ACTIVE","ENABLE_UNDO","ENABLE_REDO","tps","GlobalStoreContextProvider","props","store","setStore","idNamePairs","currentList","newListCounter","listNameActive","itemActive","listMarkedForDeletion","history","auth","storeReducer","action","type","payload","top5List","isListNameEditActive","isItemEditActive","undoActive","redoActive","console","log","hasTransactionToUndo","hasTransactionToRedo","changeListName","id","newName","response","getTop5ListById","data","success","ownerEmail","user","email","name","updateList","updateTop5ListById","_id","getListPairs","getTop5ListPairs","pairsArray","filter","list","closeCurrentList","clearAllTransactions","push","createNewList","newListName","items","createTop5List","newList","loadIdNamePairs","markListForDeletion","deleteList","listToDelete","deleteTop5ListById","deleteMarkedList","unmarkListForDeletion","setCurrentList","addMoveItemTransaction","start","end","transaction","addTransaction","addUpdateItemTransaction","index","newText","oldText","moveItem","temp","i","updateCurrentList","updateItem","newItem","updateToolbar","undo","undoTransaction","redo","doTransaction","canUndo","canRedo","setIsListNameEditActive","setIsItemEditActive","children"],"mappings":"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","sourcesContent":["import { createContext, useContext, useState } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport jsTPS from '../common/jsTPS'\nimport api from '../api'\nimport MoveItem_Transaction from '../transactions/MoveItem_Transaction'\nimport UpdateItem_Transaction from '../transactions/UpdateItem_Transaction'\nimport AuthContext from '../auth'\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n// THIS IS THE CONTEXT WE'LL USE TO SHARE OUR STORE\nexport const GlobalStoreContext = createContext({});\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n    CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n    CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n    CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n    LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n    MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n    UNMARK_LIST_FOR_DELETION: \"UNMARK_LIST_FOR_DELETION\",\n    SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n    SET_ITEM_EDIT_ACTIVE: \"SET_ITEM_EDIT_ACTIVE\",\n    SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n    ENABLE_UNDO:\"ENABLE_UNDO\",\n    ENABLE_REDO:\"ENABLE_REDO\"\n}\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nfunction GlobalStoreContextProvider(props) {\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n    const [store, setStore] = useState({\n        idNamePairs: [],\n        currentList: null,\n        newListCounter: 0,\n        listNameActive: false,\n        itemActive: false,\n        listMarkedForDeletion: null\n    });\n    const history = useHistory();\n\n    // SINCE WE'VE WRAPPED THE STORE IN THE AUTH CONTEXT WE CAN ACCESS THE USER HERE\n    const { auth } = useContext(AuthContext);\n\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\n    // HANDLE EVERY TYPE OF STATE CHANGE\n    const storeReducer = (action) => {\n        const { type, payload } = action;\n        switch (type) {\n            // LIST UPDATE OF ITS NAME\n            case GlobalStoreActionType.CHANGE_LIST_NAME: {\n                return setStore({\n                    idNamePairs: payload.idNamePairs,\n                    currentList: payload.top5List,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null,\n                    undoActive: false,\n                    redoActive: false\n                });\n            }\n            // STOP EDITING THE CURRENT LIST\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null,\n                    undoActive: false,\n                    redoActive: false,\n                })\n            }\n            // CREATE A NEW LIST\n            case GlobalStoreActionType.CREATE_NEW_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter + 1,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null,\n                    undoActive: false,\n                    redoActive: false,\n                })\n            }\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\n                return setStore({\n                    idNamePairs: payload,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null,\n                    undoActive: false,\n                    redoActive: false,\n                });\n            }\n            // PREPARE TO DELETE A LIST\n            case GlobalStoreActionType.MARK_LIST_FOR_DELETION: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: payload,\n                    undoActive: false,\n                    redoActive: false,\n                });\n            }\n            // PREPARE TO DELETE A LIST\n            case GlobalStoreActionType.UNMARK_LIST_FOR_DELETION: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null,\n                    undoActive: false,\n                    redoActive: false,\n                });\n            }\n            // UPDATE A LIST\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null,\n                    undoActive: store.undoActive,\n                    redoActive: store.redoActive,\n                });\n            }\n            // START EDITING A LIST ITEM\n            case GlobalStoreActionType.SET_ITEM_EDIT_ACTIVE: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: store.currentList,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: true,\n                    listMarkedForDeletion: null,\n                    undoActive: store.undoActive,\n                    redoActive: store.redoActive,\n                });\n            }\n            // START EDITING A LIST NAME\n            case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: true,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null,\n                    undoActive: store.undoActive,\n                    redoActive: store.redoActive,\n                });\n            }\n            case GlobalStoreActionType.ENABLE_UNDO:{\n                console.log(\"undo\");\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: store.currentList,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    undoActive: tps.hasTransactionToUndo(),\n                    redoActive: tps.hasTransactionToRedo(),\n                    listMarkedForDeletion: null\n                });\n            }\n            case GlobalStoreActionType.ENABLE_REDO:{\n                console.log(\"redo\");\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: store.currentList,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    undoActive: tps.hasTransactionToUndo(),\n                    redoActive: tps.hasTransactionToRedo(),\n                    listMarkedForDeletion: null\n                });\n            }\n            default:\n                return store;\n        }\n    }\n\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n    store.changeListName = async function (id, newName) {\n        let response = await api.getTop5ListById(id);\n        if (response.data.success) {\n            let top5List = response.data.top5List;\n            if (top5List.ownerEmail === auth.user.email){\n                top5List.name = newName;\n                async function updateList(top5List) {\n                    response = await api.updateTop5ListById(top5List._id, top5List);\n                    if (response.data.success) {\n                        async function getListPairs(top5List) {\n                            response = await api.getTop5ListPairs();\n                            if (response.data.success) {\n                                let pairsArray = response.data.idNamePairs.filter((list)=> list.ownerEmail === auth.user.email);\n                                storeReducer({\n                                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                                    payload: {\n                                        idNamePairs: pairsArray,\n                                        top5List: top5List\n                                    }\n                                });\n                            }\n                        }\n                        getListPairs(top5List);\n                    }\n                }\n                updateList(top5List);\n            }\n        }\n    }\n\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n    store.closeCurrentList = function () {\n        storeReducer({\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n            payload: {}\n        });\n        \n        tps.clearAllTransactions();\n        history.push(\"/\");\n    }\n\n    // THIS FUNCTION CREATES A NEW LIST\n    store.createNewList = async function () {\n        let newListName = \"Untitled\" + store.newListCounter;\n        let payload = {\n            name: newListName,\n            items: [\"?\", \"?\", \"?\", \"?\", \"?\"],\n            ownerEmail: auth.user.email\n        };\n        const response = await api.createTop5List(payload);\n        if (response.data.success) {\n            tps.clearAllTransactions();\n            let newList = response.data.top5List;\n            storeReducer({\n                type: GlobalStoreActionType.CREATE_NEW_LIST,\n                payload: newList\n            }\n            );\n\n            // IF IT'S A VALID LIST THEN LET'S START EDITING IT\n            history.push(\"/top5list/\" + newList._id);\n        }\n        else {\n            console.log(\"API FAILED TO CREATE A NEW LIST\");\n        }\n    }\n\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n    store.loadIdNamePairs = async function () {\n        const response = await api.getTop5ListPairs();\n        if (response.data.success) {\n            let pairsArray = response.data.idNamePairs.filter((list)=> list.ownerEmail === auth.user.email);\n            storeReducer({\n                type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n                payload: pairsArray\n            });\n        }\n        else {\n            console.log(\"API FAILED TO GET THE LIST PAIRS\");\n        }\n    }\n\n    // THE FOLLOWING 5 FUNCTIONS ARE FOR COORDINATING THE DELETION\n    // OF A LIST, WHICH INCLUDES USING A VERIFICATION MODAL. THE\n    // FUNCTIONS ARE markListForDeletion, deleteList, deleteMarkedList,\n    // showDeleteListModal, and hideDeleteListModal\n    store.markListForDeletion = async function (id) {\n        // GET THE LIST\n        let response = await api.getTop5ListById(id);\n        if (response.data.success) {\n            let top5List = response.data.top5List;\n            if (top5List.ownerEmail === auth.user.email){\n                storeReducer({\n                    type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n                    payload: top5List\n                });\n            }\n        }\n    }\n\n    store.deleteList = async function (listToDelete) {\n        let response = await api.deleteTop5ListById(listToDelete._id);\n        if (response.data.success) {\n            store.loadIdNamePairs();\n            history.push(\"/\");\n        }\n    }\n\n    store.deleteMarkedList = function () {\n        store.deleteList(store.listMarkedForDeletion);\n    }\n\n    store.unmarkListForDeletion = function () {\n        storeReducer({\n            type: GlobalStoreActionType.UNMARK_LIST_FOR_DELETION,\n            payload: null\n        });\n    }\n\n    // THE FOLLOWING 8 FUNCTIONS ARE FOR COORDINATING THE UPDATING\n    // OF A LIST, WHICH INCLUDES DEALING WITH THE TRANSACTION STACK. THE\n    // FUNCTIONS ARE setCurrentList, addMoveItemTransaction, addUpdateItemTransaction,\n    // moveItem, updateItem, updateCurrentList, undo, and redo\n    store.setCurrentList = async function (id) {\n        let response = await api.getTop5ListById(id);\n        if (response.data.success) {\n            let top5List = response.data.top5List;\n\n            response = await api.updateTop5ListById(top5List._id, top5List);\n            if (response.data.success) {\n                storeReducer({\n                    type: GlobalStoreActionType.SET_CURRENT_LIST,\n                    payload: top5List\n                });\n                history.push(\"/top5list/\" + top5List._id);\n            }\n        }\n    }\n\n    store.addMoveItemTransaction = function (start, end) {\n        let transaction = new MoveItem_Transaction(store, start, end);\n        tps.addTransaction(transaction);\n    }\n\n    store.addUpdateItemTransaction = function (index, newText) {\n        let oldText = store.currentList.items[index];\n        let transaction = new UpdateItem_Transaction(store, index, oldText, newText);\n        tps.addTransaction(transaction);\n    }\n\n    store.moveItem = function (start, end) {\n        start -= 1;\n        end -= 1;\n        if (start < end) {\n            let temp = store.currentList.items[start];\n            for (let i = start; i < end; i++) {\n                store.currentList.items[i] = store.currentList.items[i + 1];\n            }\n            store.currentList.items[end] = temp;\n        }\n        else if (start > end) {\n            let temp = store.currentList.items[start];\n            for (let i = start; i > end; i--) {\n                store.currentList.items[i] = store.currentList.items[i - 1];\n            }\n            store.currentList.items[end] = temp;\n        }\n\n        // NOW MAKE IT OFFICIAL\n        store.updateCurrentList();\n    }\n\n    store.updateItem = function (index, newItem) {\n        store.currentList.items[index] = newItem;\n        store.updateCurrentList();\n    }\n\n    store.updateCurrentList = async function () {\n        const response = await api.updateTop5ListById(store.currentList._id, store.currentList);\n        if (response.data.success) {\n            storeReducer({\n                type: GlobalStoreActionType.SET_CURRENT_LIST,\n                payload: store.currentList\n            });\n            store.updateToolbar()\n        }\n    }\n\n    store.undo = function () {\n        tps.undoTransaction();\n        store.updateToolbar()\n    }\n\n    store.redo = function () {\n        tps.doTransaction();\n        store.updateToolbar()\n    }\n\n    store.canUndo = function() {\n        return tps.hasTransactionToUndo();\n    }\n\n    store.canRedo = function() {\n        return tps.hasTransactionToRedo();\n    }\n\n    store.updateToolbar = function(){\n        if (tps.hasTransactionToUndo()){\n            storeReducer({\n                type: GlobalStoreActionType.ENABLE_UNDO,\n                payload: null\n            })\n        }\n        if (tps.hasTransactionToRedo()){\n            storeReducer({\n                type: GlobalStoreActionType.ENABLE_REDO,\n                payload: null\n            })\n        }\n    }\n\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n    store.setIsListNameEditActive = function () {\n        storeReducer({\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n            payload: null\n        });\n    }\n\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING AN ITEM\n    store.setIsItemEditActive = function () {\n        storeReducer({\n            type: GlobalStoreActionType.SET_ITEM_EDIT_ACTIVE,\n            payload: null\n        });\n    }\n\n    return (\n        <GlobalStoreContext.Provider value={{\n            store\n        }}>\n            {props.children}\n        </GlobalStoreContext.Provider>\n    );\n}\n\nexport default GlobalStoreContext;\nexport { GlobalStoreContextProvider };"]},"metadata":{},"sourceType":"module"}